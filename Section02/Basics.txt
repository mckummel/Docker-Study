Image is the application we run
Container is image instance we run on docker (we can have many containers running an image)

To start a new nginx container:

docker container run --publish 80:80 nginx

Running this command docker will:
- Look localy for the nginx image
	- if not found it will search on docker hub and download it
- Start a new container for that image
- Opens and route traffic for the 80 port

If we are using an OS other than windows we need to: 

docker container run --publish 80:80 --detach nginx

If we don't detach when we press cntrl+c the container will stop running.


-----------------------------------------
LIST and STOP
To list our containers:

docker container ls

To list stopped containers:

docker container ls -a

To stop a container:

docker container stop


----------------------------------------
Container --name
If we dont give a name to a container when we start the container it wil generate a random name for it.

docker container run --publish 80:80 --name nginx nginx

Adding the --name enable us to specify a name to the container.


-----------------------------------------
LOGS

To retrive logs from a container:

docker container logs nginx


-----------------------------------------
PROCESSES
Docker containers have master processes and can spawn worker processes...

To see the processes of a container:

docker container top nginx

-----------------------------------------
STOP containers

To stop a container we use the command:

docker container stop (id)

When stopping a container we don't need to pass the entire ID, just enough to make it unique
-----------------------------------------
RM containers

To remove a container we need to use it's container ID. Example:

docker container rm 0cd

When removing a container we don't need to pass the entire ID, just enough to make it unique
-----------------------------------------
Both Stop and RM can be run for multiple containers. Examples:

docker container stop (id) (id) (id)

docker container rm 0cd abc fgh


